typescript deep dive
https://radlohead.gitbook.io/typescript-deep-dive/ 한국어 버전

tsconfig

최상위 프로퍼티
    - compileOnSave
    - extends
    - compileOptions
    - files
    - include
    - exclude
    - references


1. compileOnSave
    - default : false.
    - 설정 하면 저장 시 바로 컴파일 가능

2. extends
    - 특정 상황에 맞게 옵션을 상속 받아 덮어씌울 수 있다.
    - 타입스크립트에서 공식적으로 extends 할 수 있는 설정을 내놓음
    - 노드의 설정에 따라 다른 설정을 써야 함
    - 타입스크립트 2.1 부터 사용 가능

3. files, include, exclude
    - files 상대 혹은 절대경로의 리스트 배열
    - 컴파일러는 files 내의 파일들만 컴파일하게된다.
    - exclude가 설정되어있어도 files가 상위 개념이라, files에 지정되어있으면 컴파일 하게 된다.
    - exclude는 include에 있는 파일을 제외시킬 수는 있지만 files는 영향을 끼치지 못한다.
    - files와 include에 지정된 파일이 없다면 컴파일러는 모든 파일을 컴파일한다.

    include, exclude
        - .gitignore와 같은 glob 패턴을 사용
        - exclude의 경우 설정하지 않으면 (node_modules, bower_components, jspm_packages, <outDir>)를 default로 제외
        - include에 있더라도 <outDir>은 항상 제외.

4. compileOptions - typeRoots, types
    - types는 우리 프로젝트에서 typing이 되어있지 않은 라이브러리를 사용할 때 이 타입을 지정할 수 있다. 
    - styled-components를 사용했을 때 npm i @types/styled-components를 했던 것과 같이, 타이핑되지않은 라이브러리를 사용할 때 사용
    - typescript 2.0부터 사용 가능해진 내장 type definition 시스템
    - typeRoots와 types를 같이 사용하지는 않음.
    - 둘 다 설정하지 않게 되면 ./node_modules/@types/ 의 모든 경로를 찾아서 사용
    - typeRoots는 배열 안에 있는 경로들 아래에서만 찾아서 사용.
    - types는 ./node_modules/@types/ 안의 모듈 이름에서 찾아 사용

5. compileOptions - target, lib
    - 작성한 타입스크립트가 어떤 런타임에서 실행 가능한지 결정해주는 역할
    - target
        - default는 es3
        - 작성된 타입스크립트를 각 버전에 맞게 컴파일해주어 js파일 생성
    - lib
        - target에 따라 지정되는 lib가 있고, 추가적으로 버전을 지정해주고 싶을 때 사용.

6. compileOptions - outDir, outFile, rootDir
    - outFile
        - 번들러 형태로 지원.
    - outDir
        - 컴파일하려는 root를 대상을 지정된 특정 폴더에 생성
    - rootDir 
        - 컴파일하려는 root의 경로를 지정하여 outDir로 출력.

7. compileOptions - strict
    - 타입 체킹을 엄격하게 하는 옵션
    - --noImplicitAny, --noImplicitThis, --strictNullChecks, --strictFunctionTypes, --strictPropertyInitialization, --strictBindCallApply, --alwaysStrict
    - --noImplicitAny
        - 명시적이지 않게 any 타입을 표현식과 선언에 사용하게되면 에러 발생
        - any일 경우 any라고 명시 필요.
        - suppressImplicitAnyIndexErrors
            - 객체 내에서 타입에 인덱스 시그니처가 없는 경우 에러 발생
            - 해당 옵션을 사용하면 이 경우는 예외로 간주하여 에러가 발생하지 않음.
    - --noImplicitThis
        - 명시적이지 않게 any 타입을 사용하여 this 표현식에 사용하면 에러 발생하지 않음
        - 첫번째 매개변수로 this를 넘겨주고, 이에 대한 타입을 설정하지 않으면 에러 발생(타입스크립트에서만 가능. js는 에러 발생)
        - this를 any로 명시적으로 지정하는 것은 합리적
        - class를 사용하게되면 noImplicitThis 에러가 나지 않음.
    - --strictNullChecks
        - 모든 타입에 null과 undefined가 활성화되어있음.
        - 해당 타입을 켜야 모든 타입은 null, undefined를 가질 수 없고, 해당 타입을 쓰기 위해서는 union type을 사용하여 명시해야함.
        - null과 undefined는 정말로 사용할 수 있는 경우에 한해 명시적으로 지정하여 사용하는 것이 좋음.
    - --strictFunctionTypes
        - 함수 타입을 지정할 때 매개변수 타입은 같거나 더 상위여야하고, 리턴값은 같거나 하위 타입이여야 한다.
        - 반환타입은 공변적(covariant), 인자 타입은 반공변적(contravariant)
    - --strictPropertyInitialization
        - 정의되지 않은 클래스 속성이 생성자에서 초기화되었는지 확인하는 옵션.(--strictNullChecks 옵션도 같이 사용해야함.)
        - 클래스 내의 생성자에서 초기값을 지정해준 경우 에러를 표시하지 않음.
        - 생성자에서는 async 사용이 불가능하므로 일반 함수 + async로 Initialization 하는 경우
        - 값을 지정할 때 변수명 뒤에 !를 붙여 나중에 초기화가 될 것이라는 것을 명시해야 한다.
        - ex) 
        -       class Person {
                    private _name!: string;
                    public async init(name: string) {
                        this._name = name;
                    }
                }
    - --strictBindCallApply
        - bind, call, apply에 대해 더욱 엄격한 검사 수행
        - bind는 해당 함수 안에서 사용할 this와 인자를 설정해주는 역할
        - call과 apply는 this와 인자를 설정한 후 실행까지 진행.
        - * call과 apply 차이점
            - call은 함수의 인자를 여러 인자의 나열로 넣어서 사용하고, apply는 모든 인자를 배열 하나로 넣어서 사용
    - --alwaysStrict
        - 각 소스 파일에 대해 javascript의 strict mode로 코드를 분석.
    - true로 하게 되면 위의 모든 옵션을 킴
    - strict를 true로 해두어야 하는 이유
        - 모든 타입을 엄격히 관리하지 않으면 개발하는 과정에서 개발자가 모르는 타입으로 진화할 수 있기 때문에 시작부터 엄격하게 타입을 관리해나가는 것이 좋음.